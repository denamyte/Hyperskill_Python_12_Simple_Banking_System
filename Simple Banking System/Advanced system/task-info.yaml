type: edu
files:
- name: tests.py
  visible: false
  text: |
    from hstest.test_case import CheckResult
    from hstest.stage_test import StageTest, WrongAnswer
    from hstest.test_case import TestCase
    from shutil import copy2
    import sqlite3
    import random
    import re
    import os

    card_number = ''
    pin = ''
    second_card_number = ''
    second_pin = ''
    are_all_inputs_read = False
    db_file_name = 'card.s3db'
    temp_db_file_name = 'temp.s3db'


    def get_credentials(output: str, count=0):
        number = re.findall(r'^400000\d{10}$', output, re.MULTILINE)
        if not number:
            raise WrongAnswer('You are printing the card number incorrectly. '
                                       'The card number should look like in the example: 400000DDDDDDDDDD,'
                                       ' where D is a digit.\nMake sure the card number is 16-digit length and '
                                       'you don\'t print any extra spaces at the end of the line!')

        PIN = re.findall(r'^\d{4}$', output, re.MULTILINE)
        if not PIN:
            raise WrongAnswer('You are printing the card PIN incorrectly. '
                                       'The PIN should look like in the example: DDDD, where D is a digit.\n'
                                       'Make sure the PIN is 4-digit length and you don\'t print any extra spaces at the'
                                       ' end of the line!')
        if count == 2:
            if len(number) == 1 or len(PIN) == 1:
                raise WrongAnswer(f'Expected 2 generated card credentials, but found {len(number)}')
            return (number[0], PIN[0]), (number[1], PIN[1])
        else:
            return number[0], PIN[0]


    def test_card_generation(output: str, value_to_return):
        global card_number, pin, are_all_inputs_read
        are_all_inputs_read = False
        credentials = get_credentials(output)
        card_number = credentials[0]
        pin = credentials[1]
        return value_to_return


    def test_difference_between_generations(output: str, value_to_return):
        global card_number, pin, are_all_inputs_read
        credentials = get_credentials(output)
        another_card_number = credentials[0]

        if another_card_number == card_number:
            return CheckResult.wrong('Your program generates two identical card numbers!')
        are_all_inputs_read = True

        return value_to_return


    def test_sign_in_with_correct_credentials(output: str, value_to_return):
        global card_number, pin
        return '{}\n{}'.format(card_number, pin)


    def test_output_after_correct_sign_in(output: str, value_to_return):
        global are_all_inputs_read
        are_all_inputs_read = True
        if 'successfully' not in output.lower():
            return CheckResult.wrong(
                'There is no \'successfully\' in your output after signing in with correct credentials')
        return value_to_return


    def test_sign_in_with_wrong_pin(output: str, value_to_return):
        global card_number, pin
        wrong_pin = pin
        while pin == wrong_pin:
            wrong_pin = ''.join(list(map(str, random.sample(range(1, 10), 4))))
        return '{}\n{}\n'.format(card_number, wrong_pin)


    def test_output_after_wrong_pin(output: str, value_to_return):
        global are_all_inputs_read
        are_all_inputs_read = True
        if 'wrong' not in output.lower():
            return CheckResult.wrong(
                'There is no \'wrong\' in your output after signing in with incorrect credentials')
        return value_to_return


    def test_sign_in_with_wrong_card_number(output: str, value_to_return):
        global card_number, pin
        wrong_card_number = card_number
        while wrong_card_number == card_number:
            temp = [4, 0, 0, 0, 0, 0]
            for _ in range(10):
                temp.append(random.randint(1, 9))
            wrong_card_number = ''.join(list(map(str, temp)))
        return '{}\n{}\n'.format(wrong_card_number, pin)


    def test_output_after_wrong_card_number(output: str, value_to_return):
        global are_all_inputs_read
        are_all_inputs_read = True
        if 'wrong' not in output.lower():
            return CheckResult.wrong(
                'There is no \'wrong\' in your output after signing in with incorrect credentials')
        return value_to_return


    def is_passed_luhn_algorithm(number):
        luhn = [int(char) for char in str(number)]
        for i, num in enumerate(luhn):
            if (i + 1) % 2 == 0:
                continue
            temp = num * 2
            luhn[i] = temp if temp < 10 else temp - 9
        return sum(luhn) % 10 == 0


    def test_luhn_algorithm(output: str, correct_num_of_cards):
        global are_all_inputs_read

        numbers = re.findall(r'400000\d{10,}', output, re.MULTILINE)

        for number in numbers:
            if len(number) != 16:
                return CheckResult.wrong(f'Wrong card number \'{number}\'. The card number should be 16-digit length.')
            if not is_passed_luhn_algorithm(number):
                return CheckResult.wrong('The card number \'{}\' doesn\'t pass luhn algorithm!'.format(number))

        if len(numbers) != correct_num_of_cards:
            return CheckResult.wrong(
                f'After creating {correct_num_of_cards} cards, found {len(numbers)} cards with correct format\n'
                f'The card number should be 16-digit length and should start with 400000.')

        are_all_inputs_read = True
        return '0'


    def check_db(output: str, value_to_return):
        if not os.path.exists(db_file_name):
            return CheckResult.wrong('Can\'t find db file named \'{}\''.format(db_file_name))
        try:
            copy2(db_file_name, temp_db_file_name)
        except Exception:
            return CheckResult.wrong('Can\'t copy database file!')

        try:
            with sqlite3.connect(db_file_name) as db:
                response = db.execute(
                    'SELECT name FROM sqlite_master WHERE type = \'table\' AND name NOT LIKE \'sqlite_%\';')
                for _ in response.fetchall():
                    if 'card' in _:
                        break
                else:
                    return CheckResult.wrong('Your database doesn\'t have a table named \'card\'')
        except Exception as exp:
            return CheckResult.wrong('Can\'t connect to the database!')

        correct_columns = (('ID', 'INTEGER'), ('NUMBER', 'TEXT'), ('PIN', 'TEXT'), ('BALANCE', 'INTEGER'))

        try:
            with sqlite3.connect(db_file_name) as db:
                response = db.execute('PRAGMA table_info(card);')
                real_columns = response.fetchall()
                for correct_column in correct_columns:
                    for real_column in real_columns:
                        real_column = [str(element).upper() for element in real_column]
                        if correct_column[0] in real_column and correct_column[1] in real_column:
                            break
                    else:
                        return CheckResult.wrong(
                            f'Can\'t find column named \'{correct_column[0].lower()}\' with \'{correct_column[1]}\' type.\n'
                            'Your table should have columns described in the stage instructions.')
        except Exception:
            return CheckResult.wrong('Can\'t connect to the database!')

        return CheckResult.correct()


    def check_db_rows(output: str, value_to_return):
        correct_num_of_cards = 10
        numbers = re.findall(r'400000\d{10,}', output, re.MULTILINE)

        for number in numbers:
            if len(number) != 16:
                return CheckResult.wrong(f'Wrong card number \'{number}\'. The card number should be 16-digit length.')
            if not is_passed_luhn_algorithm(number):
                return CheckResult.wrong('The card number \'{}\' doesn\'t pass luhn algorithm!'.format(number))

        if len(numbers) != correct_num_of_cards:
            return CheckResult.wrong(
                f'After creating {correct_num_of_cards} cards, found {len(numbers)} cards with correct format\n'
                f'The card number should be 16-digit length and should start with 400000.')

        with sqlite3.connect(db_file_name) as db:
            rows = db.execute('SELECT * FROM card').fetchall()
            for number in numbers:
                if len(number) != 16:
                    return CheckResult.wrong(f'Wrong card number \'{number}\'. The card number should be 16-digit length.')
                is_found = False
                for row in rows:
                    if number in row:
                        is_found = True
                if not is_found:
                    return CheckResult.wrong('Your database doesnâ€™t save newly created cards.\n'
                                             'Make sure you commit your DB changes right after saving a new card in the database!')
        return CheckResult.correct()


    def test_add_income(output: str, value_to_return):
        global card_number, pin, are_all_inputs_read
        are_all_inputs_read = False
        credentials = get_credentials(output)
        card_number = credentials[0]
        pin = credentials[1]
        return '2\n{}\n{}\n2\n10000'.format(card_number, pin)


    def test_second_add_income(output: str, value_to_return):
        global card_number
        expected_balance = 10000
        with sqlite3.connect(db_file_name) as db:
            result = db.execute('SELECT * FROM card WHERE number = {}'.format(card_number)).fetchone()
            if not result:
                return CheckResult.wrong(f'Can\' find card number \'{card_number}\' in the database!\n'
                                         f'Make sure you commit your DB changes right after saving a new card in the database!')
            balance = result[3]
            if balance != expected_balance:
                return CheckResult.wrong(
                    'Account balance is wrong after adding income. Expected {}'.format(expected_balance))
        return '2\n15000'


    def test_balance_after_second_income(output: str, value_to_return):
        global card_number, are_all_inputs_read
        expected_balance = 25000
        with sqlite3.connect(db_file_name) as db:
            result = db.execute('SELECT * FROM card WHERE number = {}'.format(card_number)).fetchone()
            if not result:
                return CheckResult.wrong(f'Can\' find card number \'{card_number}\' in the database!\n'
                                         f'Make sure you commit your DB changes right after saving a new card in the database!')
            balance = result[3]
            if balance != expected_balance:
                return CheckResult.wrong(
                    'Account balance is wrong after adding income. Expected {}'.format(expected_balance))
        are_all_inputs_read = True
        return value_to_return


    def test_transfer(output: str, value_to_return):
        global card_number, pin, second_card_number, second_pin, are_all_inputs_read
        are_all_inputs_read = False
        credentials = get_credentials(output, count=2)
        card_number, pin = credentials[0]
        second_card_number, second_pin = credentials[1]
        doesnt_pass_luhn = 4000003972196502
        return '2\n{}\n{}\n3\n{}'.format(card_number, pin, doesnt_pass_luhn)


    def test_transfer_doesnt_pass_luhn(output: str, value_to_return):
        if 'mistake'.lower() not in output.lower():
            return CheckResult.wrong('You should not allow to transfer to a card number that doesn\'t pass '
                                     'the Luhn algorithm.\n Instead output \'{}\''.format(
                'Probably you made mistake in card number. Please try again!'))
        doesnt_exist_card = 4000003972196501
        return '3\n{}'.format(doesnt_exist_card)


    def test_transfer_doesnt_exist_card(output: str, value_to_return):
        global second_card_number
        if 'not exist' not in output.lower():
            return CheckResult.wrong('You should not allow to transfer to a card number that does not exist.'
                                     '\nYpu should print \'{}\''.format('Such a card does not exist.'))
        return '3\n{}\n10000'.format(second_card_number)


    def test_transfer_not_enough_money(output: str, value_to_return):
        global second_card_number
        if 'not enough money' not in output.lower():
            return CheckResult.wrong('You should not allow a transfer if there is not enough money '
                                     'in the account to complete it.\n')
        return '2\n20000\n3\n{}\n10000'.format(second_card_number)


    def test_balance_after_transfer(output: str, value_to_return):
        global card_number, second_card_number, are_all_inputs_read
        with sqlite3.connect(db_file_name) as db:
            first = db.execute('SELECT * FROM card WHERE number = {}'.format(card_number)).fetchone()
            if not first:
                return CheckResult.wrong(f'Can\' find card number \'{first}\' in the database!\n'
                                         f'Make sure you commit your DB changes right after saving a new card in the database!')
            second = db.execute('SELECT * FROM card WHERE number = {}'.format(second_card_number)).fetchone()
            if not second:
                return CheckResult.wrong(f'Can\' find card number \'{second}\' in the database!\n'
                                         f'Make sure you commit your DB changes right after saving a new card in the database!')
            first_balance = first[3]
            second_balance = second[3]
            if first_balance != 10000:
                return CheckResult.wrong('Incorrect account balance of the card used to make the transfer.')
            if second_balance != 10000:
                return CheckResult.wrong('Incorrect account balance of the card to which the transfer was made.')
        are_all_inputs_read = True
        return '0'


    def test_closing_account(output: str, value_to_return):
        global card_number, pin, are_all_inputs_read
        are_all_inputs_read = False
        credentials = get_credentials(output)
        card_number, pin = credentials[0], credentials[1]
        return '2\n{}\n{}\n4'.format(card_number, pin)


    def test_rows_after_closing_account(output: str, value_to_return):
        global card_number, are_all_inputs_read
        with sqlite3.connect(db_file_name) as db:
            try:
                rows = db.execute('SELECT * FROM card WHERE number = \'{}\''.format(card_number)).fetchall()
            except:
                return CheckResult.wrong("Can't select data from 'card' table!")
            if rows:
                return CheckResult.wrong('After closing an account, the card number should be deleted from the database.')
        are_all_inputs_read = True
        return value_to_return


    class BankingSystem(StageTest):

        def generate(self):
            return [
                TestCase(
                    stdin='0',
                    check_function=check_db,
                ),
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_card_generation(output, '1'),
                        lambda output: test_difference_between_generations(output, '0')
                    ]),
                TestCase(
                    stdin=[
                        '1\n1\n1\n1\n1\n1\n1\n1',
                        lambda output: test_luhn_algorithm(output, 8),
                    ]),
                TestCase(
                    stdin='1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n0',
                    check_function=check_db_rows
                ),
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_card_generation(output, '2'),
                        lambda output: test_sign_in_with_correct_credentials(output, None),
                        lambda output: test_output_after_correct_sign_in(output, '0')
                    ]),
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_card_generation(output, '2'),
                        lambda output: test_sign_in_with_wrong_pin(output, None),
                        lambda output: test_output_after_wrong_pin(output, '0')
                    ]),
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_card_generation(output, '2'),
                        lambda output: test_sign_in_with_wrong_card_number(output, None),
                        lambda output: test_output_after_wrong_card_number(output, '0')
                    ]),
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_add_income(output, None),
                        lambda output: test_second_add_income(output, None),
                        lambda output: test_balance_after_second_income(output, '0'),
                    ]),
                TestCase(
                    stdin=[
                        '1\n1',
                        lambda output: test_transfer(output, None),
                        lambda output: test_transfer_doesnt_pass_luhn(output, None),
                        lambda output: test_transfer_doesnt_exist_card(output, None),
                        lambda output: test_transfer_not_enough_money(output, None),
                        lambda output: test_balance_after_transfer(output, None),
                    ]),
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_closing_account(output, None),
                        lambda output: test_rows_after_closing_account(output, '0')
                    ]
                )
            ]

        def check(self, reply: str, attach) -> CheckResult:
            if are_all_inputs_read:
                return CheckResult.correct()
            else:
                return CheckResult.wrong('You didn\'t read all inputs!')

        def after_all_tests(self):
            if os.path.exists('temp.s3db'):
                copy2('temp.s3db', 'card.s3db')
                os.remove('temp.s3db')


    if __name__ == '__main__':
        BankingSystem('banking.banking').run_tests()
  learner_created: false
- name: banking/account.py
  visible: true
  text: |
    class Account:

        def __init__(self, id: int, number: str, pin: str, balance: int = 0):
            self._id = id
            self._number = number
            self._pin = pin
            self._balance = balance

        @property
        def id(self):
            return self._id

        @property
        def number(self):
            return self._number

        @property
        def pin(self):
            return self._pin

        @property
        def balance(self):
            return self._balance

        def change_balance(self, amount: int):
            if self._balance + amount > 0:
                self._balance += amount

        def __str__(self):
            return f'Account: id {self.id}, number {self.number}, pin {self.pin}, balance {self.balance}'
  learner_created: true
- name: banking/utils.py
  visible: true
  text: |
    import string
    import random
    from itertools import cycle


    class Utils:
        @staticmethod
        def get_random_digit_word(word_len: int) -> str:
            """Creates and returns a word of length word_len consisting of random digits"""
            return ''.join(random.choices(string.digits, k=word_len))

        @staticmethod
        def calculate_luhn_checksum(num_str: str) -> int:
            """
            Calculates the Luhn checksum (a single digit) for a string of digits.
            At the end of the string passed there should be no symbol of the string checksum.
            """
            s = sum(i if i < 10 else i - 9 for i in (x * y for x, y in zip(map(int, num_str[::-1]), cycle([2, 1]))))
            remainder = s % 10
            return 0 if not remainder else 10 - remainder
  learner_created: true
- name: banking/bank_cli.py
  visible: true
  text: |
    from typing import Dict, Callable
    from data_state import DataState
    from state_machine import Stage


    class BankCLI:
        _SIMPLE_MESSAGES: Dict[Stage, str] = {
            Stage.LOG_IN_FAILED: '\nWrong card number or PIN!',
            Stage.LOGGED_IN: '\nYou have successfully logged in!',
            Stage.ACCOUNT_LOG_OUT: '\nYou have successfully logged out!',
            Stage.EXIT: '\nBye!'
        }

        def __init__(self, data_state: DataState):
            self._data_state = data_state
            self._actions: Dict[Stage, Callable[[], int]] = {
                Stage.MAIN_MENU: self._main_menu,
                Stage.CREATE_ACCOUNT: self._create_account,
                Stage.LOG_INTO_ACCOUNT: self._log_into_account,
                Stage.LOG_IN_FAILED: self._fn_message(Stage.LOG_IN_FAILED),
                Stage.LOGGED_IN: self._fn_message(Stage.LOGGED_IN),
                Stage.ACCOUNT_MENU: self._account_menu,
                Stage.ACCOUNT_BALANCE: self._account_balance,
                Stage.ACCOUNT_LOG_OUT: self._fn_message(Stage.ACCOUNT_LOG_OUT),
                Stage.EXIT: self._fn_message(Stage.EXIT),
            }
            self.card_number = ''

        def _fn_message(self, stage: Stage) -> Callable[[], None]:
            return lambda: print(self._SIMPLE_MESSAGES.get(stage))

        def show_menu(self, stage: Stage) -> int:
            return self._actions[stage]()

        @staticmethod
        def _main_menu() -> int:
            return int(input('''
    1. Create an account
    2. Log into account
    0. Exit
    '''))

        def _create_account(self):
            acc = self._data_state.create_account()
            print(f'''
    Your card has been created
    Your card number:
    {acc.number}
    Your card PIN:
    {acc.pin}''')

        def _log_into_account(self) -> int:
            self.card_number = input('\nEnter your card number:\n')
            pin = input('Enter your PIN:\n')
            return 1 if self._data_state.card_and_pin_are_correct(self.card_number, pin) else 0

        @staticmethod
        def _account_menu() -> int:
            return int(input('''
    1. Balance
    2. Log out
    0. Exit
    '''))

        def _account_balance(self):
            print(f'\nBalance: {self._data_state.card_balance(self.card_number)}')
  learner_created: true
- name: banking/state_machine.py
  visible: true
  text: |
    from enum import Enum, auto


    class Stage(Enum):
        NONE = auto()
        MAIN_MENU = auto()
        CREATE_ACCOUNT = auto()
        LOG_INTO_ACCOUNT = auto()
        LOG_IN_FAILED = auto()
        LOGGED_IN = auto()
        ACCOUNT_MENU = auto()
        ACCOUNT_BALANCE = auto()
        ACCOUNT_LOG_OUT = auto()
        EXIT = auto()


    class StateMachine:

        def __init__(self):
            self._state: Stage = Stage.NONE

        def switch_state(self, choice: int = 0) -> Stage:
            if self._state == Stage.NONE:
                self._state = Stage.MAIN_MENU

            elif self._state == Stage.MAIN_MENU:
                self._state = Stage.CREATE_ACCOUNT if choice == 1 \
                    else Stage.LOG_INTO_ACCOUNT if choice == 2 \
                    else Stage.EXIT

            elif self._state == Stage.CREATE_ACCOUNT:
                self._state = Stage.MAIN_MENU

            elif self._state == Stage.LOG_INTO_ACCOUNT:
                self._state = Stage.LOG_IN_FAILED if choice == 0 else Stage.LOGGED_IN

            elif self._state == Stage.LOG_IN_FAILED:
                self._state = Stage.MAIN_MENU

            elif self._state == Stage.LOGGED_IN:
                self._state = Stage.ACCOUNT_MENU

            elif self._state == Stage.ACCOUNT_MENU:
                self._state = Stage.ACCOUNT_BALANCE if choice == 1 \
                    else Stage.ACCOUNT_LOG_OUT if choice == 2 \
                    else Stage.EXIT

            elif self._state == Stage.ACCOUNT_BALANCE:
                self._state = Stage.ACCOUNT_MENU

            elif self._state == Stage.ACCOUNT_LOG_OUT:
                self._state = Stage.MAIN_MENU

            return self._state

        def going_on(self) -> bool:
            return self._state is not Stage.EXIT
  learner_created: true
- name: banking/db_layer.py
  visible: true
  text: "import sqlite3 as sql\nfrom typing import Union, Optional\nfrom account import\
    \ Account\n\n\nclass DBLayer:\n    DB_NAME = 'card.s3db'\n    TABLE_NAME = 'card'\n\
    \    QUERY_CREATE_DB = f'''\n        CREATE TABLE IF NOT EXISTS {TABLE_NAME} (\n\
    \            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            number TEXT,\n\
    \            pin TEXT,\n            balance INTEGER DEFAULT 0\n        );'''\n\
    \    QUERY_INSERT_CARD = f'''\n        INSERT INTO {TABLE_NAME}(number, pin, balance)\n\
    \            VALUES (?, ?, ?);'''\n    QUERY_COUNT_CARD = f'''\n        SELECT\
    \ COUNT(*) AS cnt \n        FROM {TABLE_NAME};'''\n    QUERY_CARD_BY_NUMBER =\
    \ f'''\n        SELECT id, number, pin, balance\n        FROM {TABLE_NAME}\n \
    \       WHERE number = :num;'''\n\n    def __init__(self):\n        self.conn:\
    \ Union[None, sql.Connection] = None\n        self._connection()\n        self._create_db()\n\
    \n    def _connection(self):\n        self.conn = sql.connect(self.DB_NAME)\n\n\
    \    def _create_db(self):\n        cursor = self.conn.cursor()\n        cursor.execute(self.QUERY_CREATE_DB)\n\
    \        self.conn.commit()\n        cursor.close()\n\n    def create_account(self,\
    \ acc: Account):\n        cursor = self.conn.cursor()\n        cursor.execute(self.QUERY_INSERT_CARD,\
    \ (acc.number, acc.pin, acc.balance))\n        self.conn.commit()\n        cursor.close()\n\
    \n    def get_account_by_number(self, number: str) -> Optional[Account]:\n   \
    \     cursor = self.conn.cursor().execute(self.QUERY_CARD_BY_NUMBER, {\"num\"\
    : number})\n        fetch = cursor.fetchone()\n        acc = None if not fetch\
    \ else Account(*fetch)\n        cursor.close()\n        return acc\n"
  learner_created: true
- name: banking/controller.py
  visible: true
  text: |
    from state_machine import StateMachine
    from data_state import DataState
    from bank_cli import BankCLI
    from db_layer import DBLayer


    class Controller:
        def __init__(self):
            self._state_machine = StateMachine()
            db_layer = DBLayer()
            data_state = DataState(db_layer)
            self._bank_cli = BankCLI(data_state)

        def run(self):
            user_input = 0
            while self._state_machine.going_on():
                state = self._state_machine.switch_state(user_input)
                user_input = self._bank_cli.show_menu(state)
  learner_created: true
- name: banking/banking.py
  visible: true
  text: |
    # Write your code here
  learner_created: false
- name: banking/data_layer.py
  visible: true
  text: |
    from typing import Tuple, Dict, Set
    from utils import Utils
    from account import Account
    from db_layer import DBLayer


    class DataState:
        def __init__(self, db_layer: DBLayer):
            self._db_layer = db_layer

        def create_account(self) -> Account:
            """Creates a new account, returns an Account instance"""

            account = Account(0, self._create_card_number(),
                              Utils.get_random_digit_word(4))
            self._db_layer.create_account(account)
            return account

        def account_exists(self, number: str) -> bool:
            return bool(self._db_layer.get_account_by_number(number))

        def _create_card_number(self):
            card_number = ''
            while not card_number or self.account_exists(card_number):
                account_number = Utils.get_random_digit_word(9)
                _15_digits = '400000' + account_number
                card_number = _15_digits + str(Utils.calculate_luhn_checksum(_15_digits))

            return card_number

        def card_and_pin_are_correct(self, number: str, pin: str) -> bool:
            acc = self._db_layer.get_account_by_number(number)
            return acc and acc.pin == pin

        def card_balance(self, number: str) -> int:
            acc = self._db_layer.get_account_by_number(number)
            return 0 if not acc else acc.balance
  learner_created: true
- name: card.s3db
  visible: true
  learner_created: true
- name: temp.s3db
  visible: true
  learner_created: true
- name: card.s3db-journal
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/109/stages/594/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Mon, 30 Aug 2021 23:39:45 UTC
record: -1
